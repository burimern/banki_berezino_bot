# –§–∞–π–ª: api/bot.py
import os
import json
import asyncio
import html
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ Dispatcher (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è Bot) ---
app = Flask(__name__)
dp = Dispatcher()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã Aiogram ---

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    WEBAPP_URL = os.getenv("WEBAPP_URL")
    if not WEBAPP_URL:
        await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: URL –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))]]
    )
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥.", reply_markup=keyboard)


@dp.message(Command("test"))
async def send_test_message(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /test"""
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    await message.answer(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å ID: {ADMIN_CHAT_ID}")
    
    if not ADMIN_CHAT_ID:
        await message.answer("–û—à–∏–±–∫–∞: ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    try:
        # bot –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ dp.feed_update
        await message.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text="‚úÖ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã –µ–≥–æ –≤–∏–¥–∏—Ç–µ, –∑–Ω–∞—á–∏—Ç, –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ! –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–∏–π—Ç–∏ –≤ —á–∞—Ç.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n\n<pre>{html.escape(str(e))}</pre>", parse_mode="HTML")


@dp.message(lambda message: message.content_type == types.ContentType.WEB_APP_DATA)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    try:
        data = json.loads(message.web_app_data.data)
        user = message.from_user
        safe_user_firstname = html.escape(user.first_name)
        user_link = f"@{user.username}" if user.username else f"<a href='tg://user?id={user.id}'>{safe_user_firstname}</a>"
        
        admin_message = f"üö® **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** {user_link}\n\n"
        admin_message += "--- –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ ---\n"
        for item in data.get('items', []):
            safe_item_name = html.escape(item.get('name', '?'))
            admin_message += f"‚Ä¢ {safe_item_name} (x{item.get('quantity', 1)}) - {item.get('price', 0) * item.get('quantity', 1)} —Ä—É–±.\n"
        admin_message += f"\nüí∞ **–ò—Ç–æ–≥–æ:** {data.get('total_price', 0)} —Ä—É–±.\n\n"
        admin_message += "–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

        if ADMIN_CHAT_ID:
            # bot –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ dp.feed_update
            await message.bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode="HTML")
        else:
            print("WARNING: ADMIN_CHAT_ID is not set.")

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"!!! CRITICAL ERROR processing order: {e}", flush=True)
        await message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")


# --- Flask-—á–∞—Å—Ç—å –¥–ª—è –ø—Ä–∏–µ–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ ---

async def process_update(bot: Bot, update_data: dict):
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    update = types.Update.model_validate(update_data, context={"bot": bot})
    await dp.feed_update(bot=bot, update=update)

@app.route('/api/bot', methods=['POST'])
def webhook_handler():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç Telegram"""
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        print("CRITICAL: BOT_TOKEN is not set!")
        return "Bot token not provided", 500

    bot_instance = Bot(token=BOT_TOKEN)
    update_data = request.get_json()
    asyncio.run(process_update(bot_instance, update_data))
    return 'ok', 200
