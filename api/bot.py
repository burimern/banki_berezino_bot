import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import gspread

# --- –ù–ê–°–¢–†–û–ô–ö–ê GOOGLE SHEETS ---
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON', '{}')
GOOGLE_SHEET_NAME = os.getenv('GOOGLE_SHEET_NAME')

try:
    SERVICE_ACCOUNT_INFO = json.loads(GOOGLE_CREDENTIALS_JSON)
except json.JSONDecodeError:
    SERVICE_ACCOUNT_INFO = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}

def get_spreadsheet():
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã."""
    try:
        gc = gspread.service_account_from_dict(SERVICE_ACCOUNT_INFO)
        return gc.open(GOOGLE_SHEET_NAME)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return None

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –û–°–ù–û–í–ù–´–• –ö–ù–û–ü–û–ö ---

def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥ —Ñ–∏—Ä–º", callback_data='catalog_brands')],
        [InlineKeyboardButton("üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data='cart_view')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
    
    query = update.callback_query
    if query:
        query.answer()
        query.edit_message_text(text=message_text, reply_markup=reply_markup)
    else:
        update.message.reply_text(text=message_text, reply_markup=reply_markup)

def show_brands(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏—Ä–º (–ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ) –∫–∞–∫ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    query.answer()
    
    spreadsheet = get_spreadsheet()
    if not spreadsheet:
        query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    worksheets = spreadsheet.worksheets()
    keyboard = [[InlineKeyboardButton(sheet.title, callback_data=f"brand:{sheet.title}")] for sheet in worksheets]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='start_menu')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ñ–∏—Ä–º—É:", reply_markup=reply_markup)

def show_products_by_brand(update: Update, context: CallbackContext, brand_name: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏—Ä–º—ã, —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ –ø–æ–ª—é 'in_stock'."""
    query = update.callback_query
    query.answer()
    
    spreadsheet = get_spreadsheet()
    if not spreadsheet:
        query.edit_message_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
        return
        
    try:
        sheet = spreadsheet.worksheet(brand_name)
        all_products = sheet.get_all_records()
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö in_stock = TRUE
        available_products = [p for p in all_products if p.get('in_stock') == True]
    except gspread.WorksheetNotFound:
        query.edit_message_text("–¢–∞–∫–∞—è —Ñ–∏—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
        
    if not available_products:
        query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.")
        return
        
    query.edit_message_text(f"–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ñ–∏—Ä–º—ã: <b>{brand_name}</b>", parse_mode='HTML')

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª—É–∂–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID
    for idx, product in enumerate(available_products):
        text = (
            f"<b>{product['name']}</b>\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {product['price']} ‚ÇΩ"
        )
        # –í callback_data –ø–µ—Ä–µ–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
        callback_data = f"cart_add:{brand_name}:{idx}"
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=callback_data)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        context.bot.send_message(
            chat_id=query.message.chat_id, text=text,
            reply_markup=reply_markup, parse_mode='HTML'
        )
    
    back_keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Ñ–∏—Ä–º", callback_data='catalog_brands')]]
    context.bot.send_message(
        chat_id=query.message.chat_id, text="–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(back_keyboard)
    )

def view_cart(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É."""
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    cart = user_carts.get(user_id, {})
    
    if not cart:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='catalog_brands')]]
        query.edit_message_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return
        
    spreadsheet = get_spreadsheet()
    if not spreadsheet:
        query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö.")
        return
        
    total_price = 0
    cart_text = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    sheets_data_cache = {}

    for cart_key, quantity in cart.items():
        try:
            brand_name, product_index_str = cart_key.split(':', 1)
            product_index = int(product_index_str)
            
            if brand_name not in sheets_data_cache:
                sheet = spreadsheet.worksheet(brand_name)
                all_products = sheet.get_all_records()
                sheets_data_cache[brand_name] = [p for p in all_products if p.get('in_stock') == True]
            
            available_products = sheets_data_cache[brand_name]
            
            if product_index < len(available_products):
                product = available_products[product_index]
                item_price = int(product['price']) * quantity
                total_price += item_price
                cart_text += f"‚ñ™Ô∏è {product['name']} ({quantity} —à—Ç.) - {item_price} ‚ÇΩ\n"
            else:
                cart_text += f"‚ñ™Ô∏è <i>–û–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</i>\n"

        except (gspread.WorksheetNotFound, ValueError, IndexError):
            cart_text += f"‚ñ™Ô∏è <i>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤</i>\n"
            continue

    cart_text += f"\n<b>–ò—Ç–æ–≥–æ: {total_price} ‚ÇΩ</b>"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='checkout')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data='cart_clear')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='catalog_brands')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text=cart_text, reply_markup=reply_markup, parse_mode='HTML')

# --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ---

def button_callback_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    data = query.data
    user_id = query.from_user.id
    
    if data == 'start_menu':
        start(update, context)
    elif data == 'catalog_brands':
        show_brands(update, context)
    elif data.startswith('brand:'):
        brand_name = data.split(':', 1)[1]
        show_products_by_brand(update, context, brand_name)
    elif data.startswith('cart_add:'):
        _, brand_name, product_index = data.split(':', 2)
        cart_key = f"{brand_name}:{product_index}"
        cart = user_carts.get(user_id, {})
        cart[cart_key] = cart.get(cart_key, 0) + 1
        user_carts[user_id] = cart
        query.answer(text="‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    elif data == 'cart_view':
        view_cart(update, context)
    elif data == 'cart_clear':
        if user_id in user_carts:
            del user_carts[user_id]
        query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í –∫–∞—Ç–∞–ª–æ–≥", callback_data='catalog_brands')]]
        query.edit_message_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
    elif data == 'checkout':
        query.answer()
        query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä @username.")
        if user_id in user_carts:
            del user_carts[user_id]
