import os
import json
import asyncio
import html # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

app = Flask(__name__)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_main_menu(url: str) -> InlineKeyboardMarkup:
    web_app = WebAppInfo(url=url)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", web_app=web_app)]]
    )
    return keyboard

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    if not WEBAPP_URL:
        await message.answer("–û—à–∏–±–∫–∞: URL –¥–ª—è Web App –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
        reply_markup=get_main_menu(WEBAPP_URL)
    )

@dp.message(lambda message: message.content_type == types.ContentType.WEB_APP_DATA)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        
        user = message.from_user
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        safe_user_firstname = html.escape(user.first_name)
        user_link = f"@{user.username}" if user.username else f"<a href='tg://user?id={user.id}'>{safe_user_firstname}</a>"

        admin_message = f"üö® **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** {user_link}\n\n"
        admin_message += "--- –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ ---\n"
        for item in data.get('items', []):
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ---
            safe_item_name = html.escape(item.get('name', '?'))
            admin_message += f"‚Ä¢ {safe_item_name} (x{item.get('quantity', 1)}) - {item.get('price', 0) * item.get('quantity', 1)} —Ä—É–±.\n"
        
        admin_message += f"\nüí∞ **–ò—Ç–æ–≥–æ:** {data.get('total_price', 0)} —Ä—É–±.\n\n"
        admin_message += "–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."

        if ADMIN_CHAT_ID:
            await bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode="HTML")
        else:
            print("WARNING: ADMIN_CHAT_ID is not set.")

        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

    except Exception as e:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É ---
        print(f"!!! CRITICAL ERROR processing order: {e}", flush=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–µ–±–µ –∂–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if ADMIN_CHAT_ID:
            await bot.send_message(ADMIN_CHAT_ID, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞.")

async def handle_update(update_data):
    update = types.Update.model_validate(update_data, context={"bot": bot})
    await dp.feed_update(bot=bot, update=update)

@app.route('/api/bot', methods=['POST'])
def process_webhook():
    update_data = request.get_json()
    asyncio.run(handle_update(update_data))
    return 'ok', 200
