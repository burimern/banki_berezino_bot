# –§–∞–π–ª: api/bot.py
import os
import json
import asyncio
import html
import traceback
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError

app = Flask(__name__)
dp = Dispatcher()

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    WEBAPP_URL = os.getenv("WEBAPP_URL")
    if not WEBAPP_URL: return await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: URL –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))]])
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥.", reply_markup=keyboard)

@dp.message(lambda message: message.content_type == types.ContentType.WEB_APP_DATA)
async def handle_web_app_data(message: types.Message):
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    try:
        data = json.loads(message.web_app_data.data)
        user = message.from_user
        safe_user_firstname = html.escape(str(user.first_name or ''))
        user_link = f"@{user.username}" if user.username else f"<a href='tg://user?id={user.id}'>{safe_user_firstname}</a>"
        
        admin_message = f"üö® **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** {user_link}\n\n"
        admin_message += "--- –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ ---\n"
        for item in data.get('items', []):
            safe_item_name = html.escape(str(item.get('name', '?')))
            admin_message += f"‚Ä¢ {safe_item_name} (x{item.get('quantity', 1)}) - {item.get('price', 0) * item.get('quantity', 1)} —Ä—É–±.\n"
        admin_message += f"\nüí∞ **–ò—Ç–æ–≥–æ:** {data.get('total_price', 0)} —Ä—É–±.\n\n"
        admin_message += "–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

        if not ADMIN_CHAT_ID:
            print("WARNING: ADMIN_CHAT_ID is not set.")
            return await message.answer("‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç (–∞–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω).")

        # --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        try:
            await message.bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode="HTML")
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except TelegramAPIError as e:
            # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É. –û—à–∏–±–∫–∞:\n\n<pre>{html.escape(str(e))}</pre>"
            await message.answer(error_text, parse_mode="HTML")
            # –¢–∞–∫–∂–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            print(f"!!! Telegram API Error: {e}")

    except Exception as e:
        print(f"!!! CRITICAL ERROR in handle_web_app_data: {traceback.format_exc()}")
        await message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")

# --- Flask-—á–∞—Å—Ç—å (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def process_update(bot: Bot, update_data: dict):
    update = types.Update.model_validate(update_data, context={"bot": bot})
    await dp.feed_update(bot=bot, update=update)

@app.route('/api/bot', methods=['POST'])
def webhook_handler():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        print("CRITICAL: BOT_TOKEN is not set!")
        return "Bot token not provided", 500
    bot_instance = Bot(token=BOT_TOKEN)
    update_data = request.get_json()
    asyncio.run(process_update(bot_instance, update_data))
    return 'ok', 200
