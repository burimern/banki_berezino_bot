# –§–∞–π–ª: api/bot.py
import os
import json
import asyncio
import html
import traceback
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__)
dp = Dispatcher()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
@dp.errors()
async def error_handler(update: types.Update, exception: Exception):
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    if ADMIN_CHAT_ID:
        try:
            tb_str = "".join(traceback.format_exception(type(exception), exception, exception.__traceback__))
            error_message = (
                f"üö® <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>\n\n"
                f"<b>–¢–∏–ø:</b> {html.escape(str(type(exception).__name__))}\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {html.escape(str(exception))}\n\n"
                f"<b>Traceback:</b>\n<pre>{html.escape(tb_str)}</pre>"
            )
            if len(error_message) > 4096:
                error_message = error_message[:4090] + "..."
            await update.bot.send_message(chat_id=ADMIN_CHAT_ID, text=error_message, parse_mode="HTML")
        except Exception as e:
            print(f"!!! –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É: {e}")
    return True

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    WEBAPP_URL = os.getenv("WEBAPP_URL")
    if not WEBAPP_URL:
        return await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ—Ç WEBAPP_URL")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üëã", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ WebApp ---
@dp.message(lambda m: m.content_type == types.ContentType.WEB_APP_DATA)
async def handle_web_app_data(message: types.Message):
    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

    try:
        data = json.loads(message.web_app_data.data)
    except Exception as e:
        return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")

    user = message.from_user
    safe_user_firstname = html.escape(str(user.first_name or ''))
    user_link = f"@{user.username}" if user.username else f"<a href='tg://user?id={user.id}'>{safe_user_firstname}</a>"

    admin_message = f"üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\nüë§ –ö–ª–∏–µ–Ω—Ç: {user_link}\n\n"

    # –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
    total = 0
    for item in data.get("items", []):
        safe_item_name = html.escape(str(item.get("name", "?")))
        quantity = int(item.get("quantity", 1))
        price = float(item.get("price", 0))
        subtotal = price * quantity
        total += subtotal
        admin_message += f"‚Ä¢ {safe_item_name} (x{quantity}) ‚Äî {subtotal} —Ä—É–±.\n"

    admin_message += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {data.get('total_price', total)} —Ä—É–±.\n"
    admin_message += "\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."

    if ADMIN_CHAT_ID:
        await message.bot.send_message(ADMIN_CHAT_ID, admin_message, parse_mode="HTML")

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

# --- Flask-—á–∞—Å—Ç—å ---
async def process_update(bot: Bot, update_data: dict):
    print("=== Update ===")
    print(update_data)  # –ª–æ–≥ –¥–ª—è –¥–µ–±–∞–≥–∞
    update = types.Update.model_validate(update_data, context={"bot": bot})
    await dp.feed_update(bot=bot, update=update)

@app.route("/api/bot", methods=["POST"])
def webhook_handler():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        return "Bot token not provided", 500

    bot_instance = Bot(token=BOT_TOKEN)
    update_data = request.get_json()
    asyncio.run(process_update(bot_instance, update_data))
    return "ok", 200
