# api/index.py
import os
import json
import time
import asyncio
from flask import Flask, jsonify, send_from_directory, request
from flask_cors import CORS
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv

# --- –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL") # URL –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–∞ Vercel
if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ BOT_TOKEN –∏ WEBAPP_URL –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Google Sheets
SHEET_NAME = os.getenv('SHEET_NAME', 'banki_berezino')
ORDERS_SHEET_NAME = "Orders" # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
app = Flask(__name__, static_folder='../public', static_url_path='') # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ public
CORS(app)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

CACHE = {'data': None, 'last_updated': 0}
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç

# --- –õ–æ–≥–∏–∫–∞ Google Sheets ---
def get_gspread_client():
    creds_json_str = os.getenv('GOOGLE_CREDENTIALS_JSON')
    if not creds_json_str:
        raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    creds_dict = json.loads(creds_json_str)
    scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    return gspread.authorize(creds)

def get_products_from_sheets():
    # ... (–í–∞—à –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    current_time = time.time()
    if CACHE['data'] and (current_time - CACHE['last_updated'] < CACHE_DURATION):
        return CACHE['data']
    try:
        client = get_gspread_client()
        spreadsheet = client.open(SHEET_NAME)
        products_by_brand = {}
        for sheet in spreadsheet.worksheets():
            if sheet.title == ORDERS_SHEET_NAME: continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—Å—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏
            brand_name = sheet.title
            rows = sheet.get_all_records()
            products_list = []
            for row_dict in rows:
                row = {key.lower(): value for key, value in row_dict.items()}
                if str(row.get('in_stock')).upper() != 'TRUE': continue
                try: price = int(float(row.get('price', 0)))
                except (ValueError, TypeError): price = 0
                products_list.append({
                    'id': row.get('id', f"{brand_name}_{len(products_list)}"),
                    'name': row.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'), 'price': price
                })
            if products_list: products_by_brand[brand_name] = products_list
        CACHE['data'] = products_by_brand
        CACHE['last_updated'] = time.time()
        return products_by_brand
    except Exception as e:
        print(f"ERROR fetching from Google Sheets: {e}")
        return {"error": "Could not fetch data", "details": str(e)}

def add_order_to_sheet(user_data, order_data):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –≤ Google –¢–∞–±–ª–∏—Ü—É"""
    try:
        client = get_gspread_client()
        spreadsheet = client.open(SHEET_NAME)
        worksheet = spreadsheet.worksheet(ORDERS_SHEET_NAME) # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç "Orders"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
        user_id = user_data.get('id')
        username = user_data.get('username', 'N/A')
        first_name = user_data.get('first_name', 'N/A')
        total_price = order_data.get('totalPrice', 0)
        items_json = json.dumps(order_data.get('items', []), ensure_ascii=False)

        new_row = [time.strftime('%Y-%m-%d %H:%M:%S'), user_id, username, first_name, total_price, items_json]
        worksheet.append_row(new_row, value_input_option='USER_ENTERED')
        return True
    except Exception as e:
        print(f"ERROR writing order to Google Sheet: {e}")
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Aiogram (–õ–æ–≥–∏–∫–∞ –ë–æ—Ç–∞) ---
@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! üëã\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App
@dp.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑"""
    user = message.from_user
    data_str = message.web_app_data.data
    try:
        order_data = json.loads(data_str) # –î–∞–Ω–Ω—ã–µ –∏–∑ JS –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ JSON-—Å—Ç—Ä–æ–∫–∏
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheet
        success = add_order_to_sheet(user.model_dump(), order_data)

        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
            items_text = "\n".join([f"- {item['name']} ({item['quantity']} —à—Ç.)" for item in order_data.get('items', [])])
            total_price = order_data.get('totalPrice', 0)
            
            response_text = (
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n"
                f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_text}\n\n"
                f"<b>–ò—Ç–æ–≥–æ:</b> {total_price} —Ä—É–±.\n\n"
                f"–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            await message.answer(response_text, parse_mode="HTML")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    except Exception as e:
        print(f"ERROR processing WebApp data: {e}")
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# --- –ú–∞—Ä—à—Ä—É—Ç—ã Flask (API –∏ Webhook) ---
@app.route('/api/products', methods=['GET'])
def get_products_endpoint():
    data = get_products_from_sheets()
    if "error" in data:
        return jsonify(data), 500
    return jsonify(data)

@app.route('/api/bot', methods=['POST'])
async def webhook_handler():
    """–≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    update_data = request.get_json()
    update = types.Update(**update_data)
    await dp.feed_update(bot, update)
    return "ok", 200

# –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_frontend(path):
    if path != "" and os.path.exists(os.path.join(app.static_folder, path)):
        return send_from_directory(app.static_folder, path)
    else:
        return send_from_directory(app.static_folder, 'index.html')
